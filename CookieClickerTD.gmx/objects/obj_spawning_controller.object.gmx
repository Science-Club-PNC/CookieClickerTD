<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//time in steps since last wave end
timer = 200;

//current wave number
wave_num = 0;

//current wave
subwaves = 0;

//is currently spawning
spawning = false

//array of amount of spawned enemies per subwave
subwave_numbers = 0;

//array of cooldown of spawning enemies in subwave
subwave_timers = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug: random waveless spawning
if (irandom(30) == 31)
{
    with (instance_find(obj_spawner, irandom(instance_number(obj_spawner) - 1)))
    {
        enemy_create(x + tile_size/2, y + tile_size/2, false); 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (spawning)
{
    var wave_done = true;
    
    //loop through subwaves
    for (var i=0; i&lt;ds_list_size(subwaves); i++)
    {
        //check if there are enemies left to spawn in this subwave
        if (subwave_numbers[i] &gt; 0)
        {
            //get subwave
            var subwave = subwaves[| i];
            
            //mark spawning isn't done yet
            wave_done = false;

            //cooldown and loop through spawns this step
            for (subwave_timers[i] += subwave[?'subwave_speed']; subwave_timers[i] &gt; 1; subwave_timers[i]--)
            {
                //decrease spawnable enemies in subwave
                subwave_numbers[i]--;
                
                //find a spawner and spawn enemy there
                with (instance_find(obj_spawner, irandom(instance_number(obj_spawner) - 1)))
                {
                    enemy_create(x + tile_size/2, y + tile_size/2, subwave);
                }
                
                //check if there are enemies left to spawn in this subwave
                if (subwave_numbers[i] &lt;= 0)
                {
                    break;
                }
            }
        }
    }
    
    //end wave if there are no enemies left to spawn in this wave
    if (wave_done)    
    {
        spawning = false;
        enemy_wave_destroy(subwaves);
    }
}
else
{
    //increase time since last wave
    timer++;
    
    //start new wave if timer is done
    if (timer &gt; 400)
    {
        //reset timer
        timer = 0;
        
        //get new wave
        wave_num++;
        subwaves = enemy_wave_create(wave_num);
        
        //init spawning
        spawning = true;
        subwave_numbers = 0;
        subwave_timers = 0;
        
        for (var i=0; i&lt;ds_list_size(subwaves); i++)
        {
            var subwave = subwaves[| i];
            subwave_numbers[i] = subwave[?'enemy_amount'];
            subwave_timers[i] = 0;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug: draw spawning stats
draw_set_font(font_debug);
draw_set_colour(c_white);
draw_text(0,20,"timer: " + string(timer) + 
    "#wave_num: " + string(wave_num));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
